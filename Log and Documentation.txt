1. I have successfully imported the CSV file, read it and generated events out of it.
2. Now the first step in the alpha algorithm is to identify unique tasks or unique statuses performed in the event log. Looking at the csv file, the status column contains the activities performed.
3. I will gather all the unique activities. Let's see how this goes. Luckily, there is already a status column. I will just use that.
4. I have learned that a set such as HashSet and TreeSet can be used to store unique values and is efficient. For now, I am going with the less efficient approach. Adding this to improvements I can implement later.
5. Okay, this looks way too impressive to ignore. I am going to use a hashset. Sounds cool too.
6. So, the Hash Set is part of the Set interface in Java. It basically stores unique values and stores them in a random order (not sorted). The best part of this is that it
provides constant time performance for basic operations such as add, remove, contains and size. This is because it uses hashing to store elements.
7. HASH MAPUH for the win.
8. Time to implement.
9. Okay, actually returning to the less efficient method. Will implement it later.
10. ArrayList is the best friend I always wanted.
11. Now, for the next step in Alpha Algorithm, we need to identify the start and end event of each case (trace). In a ticket system, each ticket is a case.
12. Alright, I need to seriously debut the HashMapUh. It is HashMAPUH time.
13. So far, we have done the following Alpha Algorithm steps:
i) Task Log which is the unique activities method.
ii) Task Initiation and Task Output for each case or trace. This is generate traces method.
14. Now, we need to generate PL which is process log. This is unique traces.
15. There are two ways I can approach this. Generate unique traces based on the order of the activities or through time stamps of start and end events.
16. Generating based on set of activities in the trace sounds reasonable.
17. I will include an array list in trace class and it will store the sequence of activities.
18. Then, I will simply compare arraylists of each trace and if they are equal, I will not add it to the PL.
19. Point 18 was discarded and instead hashmap will be used. For process log, we just need to look at order of activity for each trace or combination of activities.
20. For point 20, we implement a simple arraylist containing statuses only. Then use a hashmap to use it as key so that it picks lists with unique statuses.
21. Implementing this brb. This will conclude 4 requirements of assignment.
